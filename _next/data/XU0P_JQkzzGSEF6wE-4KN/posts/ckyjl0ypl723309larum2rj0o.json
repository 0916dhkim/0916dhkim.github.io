{"pageProps":{"post":{"id":"ckyjl0ypl723309larum2rj0o","title":"모노리포에서 Prisma 사용하기","content":"프리즈마는 차원이 다른 개발자 경험을 제공하는 타입스크립트 ORM입니다. 대부분의 경우 프리즈마는 설정이 필요 없지만, 모노리포에 프리즈마를 추가하는 작업은 직관적이지 않을 수 있습니다.\n이 포스트에서는 프리즈마를 모노리포 환경에서 사용하는 법을 다룹니다.\n\n# 간단한 프리즈마 소개\n프리즈마에는 크게 두가지 중요한 개념이 있습니다. [스키마](https://www.prisma.io/docs/concepts/components/prisma-schema) 그리고 [클라이언트](https://www.prisma.io/docs/concepts/components/prisma-client)인데요:\n- 프리즈마 스키마는 데이터 모델과 데이터베이스 설정을 정의하는 텍스트 파일이며, 이렇게 생겼습니다:\n  ```\n  datasource db {\n    url      = env(\"DATABASE_URL\")\n    provider = \"postgresql\"\n  }\n\n  generator client {\n    provider = \"prisma-client-js\"\n  }\n\n  model Contact {\n    id        Int      @id @default(autoincrement())\n    createdAt DateTime @default(now())\n    email     String   @unique\n    name      String?\n  }\n  ```\n- 이 스키마를 이용해서 프리즈마는 `@prisma/client` 라는 패키지를 생성하는데, 이 패키지가 ORM의 타입지원과 기능을 제공합니다:\n  ```\n  import {PrismaClient} from '@prisma/client';\n  const prisma = new PrismaClient();\n\n  // 자동으로 `Contact` 타입으로 유추됩니다.\n  const newContact = await prisma.contact.create({\n    data: {email: 'john@example.com'},\n  });\n  ```\n\n# 그렇다면 여러 패키지에서 하나의 `@prisma/client`를 돌려 쓰려면 어떻게 해야 하나요?\n모노리포 워크스페이스 구조가 이런 식으로 생겼다고 해봅시다:\n- Project Root\n  - apps\n    - dashboard\n  - libs\n    - core\n생성된 프리즈마 클라이언트를 공유하려면 일단 프리즈마 스키마를 별도의 패키지에 이렇게 집어넣습니다:\n- Project Root\n  - apps\n    - dashboard\n  - libs\n    - core\n    - shared-prisma\n      - prisma\n        - schema.prisma\n      - src\n        - index.ts\n\n이제 `prisma generate` 커맨드를 사용해서 `@prisma/client`를 생성하고, 그 생성된 클라이언트를 `libs/shared-prisma/src/index.ts` 모듈에서 re-export 해주면 됩니다:\n```ts\nexport * from '@prisma/client';\n\n// 선택사항: 프리즈마 인스턴스를 여기에서 생성할 수도 있습니다.\nimport {PrismaClient} from '@prisma/client';\nexport const prisma = new PrismaClient();\n```\n\n이렇게 설정해두면 다른 패키지에서 공유된 프리즈마 클라이언트를 import 할 수 있습니다.\n```ts\nimport {prisma} from '@myscope/shared-prisma';\n\nconst contacts = await prisma.contact.findMany();\n```\n\n# Nx 사용시 주의사항\n[buildable 혹은 publishable](https://nx.dev/structure/buildable-and-publishable-libraries) 라이브러리를 사용하지 않는다면, 모든 의존성이 워크스페이스에 설치됩니다.\n상황에 따라 이게 편할 수도 있지만 정말 불편할 수도 있습니다.\n- 좋은 경우: `@prisma/client`가 워크스페이스에 설치되기 때문에 별도로 `shared-prisma`에서 re-export를 할 필요가 없습니다. 모든 패키지에서 이미 `@prisma/client`에 접근 가능합니다.\n- 안좋은 경우: 모노리포 안에 서로 다른 프리즈마 스키마를 (따라서 다른 프리즈마 클라이언트를) 사용하는 앱이 여러개 있는 경우, Nx의 이러한 구조가 골치아픕니다.\n  각각의 프리즈마 스키마에서 `@prisma/client`를 생성할 때마다 전부 워크스페이스의 `@prisma/client`를 덮어쓰기 때문입니다.\n  이 문제를 해결하기 위해서는 `shared-prisma`를 독립적인 `package.json`과 `node_modules`를 가진 buildable Nx 라이브러리로 만들어줘야합니다."}},"__N_SSG":true}