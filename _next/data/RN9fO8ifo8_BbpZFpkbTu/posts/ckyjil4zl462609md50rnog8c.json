{"pageProps":{"post":{"id":"ckyjil4zl462609md50rnog8c","title":"Using Prisma in a Monorepo","content":"Prisma is an amazing ORM for TypeScript that allows you to access database in a completely type-safe way.\nThe developer experience Prisma provides can't be compared to anything else. In this article, you will learn how to use Prisma in a monorepo.\n\n# Brief Overview of How Prisma Works\nThere are two major concept in Prisma: [schema](https://www.prisma.io/docs/concepts/components/prisma-schema) and [client](https://www.prisma.io/docs/concepts/components/prisma-client)\n- Prisma schema is a text file describing the data models and database configurations. It looks like this:\n  ```\n  datasource db {\n    url      = env(\"DATABASE_URL\")\n    provider = \"postgresql\"\n  }\n\n  generator client {\n    provider = \"prisma-client-js\"\n  }\n\n  model Contact {\n    id        Int      @id @default(autoincrement())\n    createdAt DateTime @default(now())\n    email     String   @unique\n    name      String?\n  }\n  ```\n- From schema, Prisma generates a package called `@prisma/client` which provides type-safe interface to your models.\n  ```\n  import {PrismaClient} from '@prisma/client';\n  const prisma = new PrismaClient();\n\n  // This is inferred as `Contact` type.\n  const newContact = await prisma.contact.create({\n    data: {email: 'john@example.com'},\n  });\n  ```\n\n# Great! How Do I Share the Generated `@prisma/client` across Multiple Packages?\nLet's say you have a monorepo workspace that is structured like this:\n- Project Root\n  - apps\n    - dashboard\n  - libs\n    - core\n\nIf you want to share the generated Prisma client, you can put your Prisma schema in a separate package like this:\n- Project Root\n  - apps\n    - dashboard\n  - libs\n    - core\n    - shared-prisma\n      - prisma\n        - schema.prisma\n      - src\n        - index.ts\n\nAfter generating `@prisma/client` with `prisma generate` command, re-export the generated client from `libs/shared-prisma/src/index.ts` module:\n```ts\nexport * from '@prisma/client';\n\n// Optional: Create a Prisma client instance here.\nimport {PrismaClient} from '@prisma/client';\nexport const prisma = new PrismaClient();\n```\n\nNow you can import shared Prisma client from other packages:\n```ts\nimport {prisma} from '@myscope/shared-prisma';\n\nconst contacts = await prisma.contact.findMany();\n```\n\n# Caveats for Nx\nUnless you are using a [buildable or publishable](https://nx.dev/structure/buildable-and-publishable-libraries) library,\nall dependencies are installed to the workspace. This can be both good and bad depends on your needs:\n- Good: you don't need to re-export `@prisma/client` from `shared-prisma` because `@prisma/client` is installed to the workspace. All packages can access it already.\n- Bad: if you want to create multiple apps that has different Prisma schemas (thus different Prisma clients), Nx's structure is not so great.\n  When you try to generate `@prisma/client` using different Prisma schemas, they all get installed to the central `@prisma/client` overwriting each other.\n  To solve this you need to make `shared-prisma` a buildable Nx library with its own `package.json` and `node_modules`."}},"__N_SSG":true}